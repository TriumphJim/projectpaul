/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ (() => {

eval("// script.js\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB_MEgF_MWeUBqZ_4hUVh5ODr5pKy0GzNM\",\n  authDomain: \"projectpaul-bbc85.firebaseapp.com\",\n  databaseURL: \"https://projectpaul-bbc85-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"projectpaul-bbc85\",\n  storageBucket: \"projectpaul-bbc85.appspot.com\",\n  messagingSenderId: \"1046360046156\",\n  appId: \"1:1046360046156:web:0c671f519baebfcc4a12e9\",\n  measurementId: \"G-EQ2PL6NRRD\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Firebase services\nconst auth = firebase.auth();\nconst storage = firebase.storage();\nconst db = firebase.firestore();\nconst firestore = firebase.firestore();\nconst fbStorage = getStorage();\n\n// Authentication state change handler\n// firebase.auth().onAuthStateChanged(user => {\n//   if (user) {\n//     console.log('User signed in:', user);\n//     document.getElementById('app-section').style.display = 'block';\n//   } else {\n//     console.log('No user signed in.');\n//     document.getElementById('app-section').style.display = 'block';\n//     //checkEmailAndStartUI;\n//   }\n// });\n\n// Auth state change handler\nfirebase.auth().onAuthStateChanged(user => {\n  if (user) {\n    console.log(\"User is signed in:\", user);\n    document.getElementById('app-section').style.display = 'block';  // Show app section\n  } else {\n    console.log(\"User is not signed in\");\n    initializeFirebaseUI();  // Initialize FirebaseUI for sign-in\n  }\n});\n\n\n\n\n\n// Flag to control FirebaseUI initialization\nlet firebaseUIInitialized = false;\n\n// Function to initialize FirebaseUI\nfunction initializeFirebaseUI() {\n  console.log(\"initializeFirebaseUI\");\n\n  if (firebaseUIInitialized) return; // Prevent re-initialization\n\n  console.log('Initializing FirebaseUI...');\n  const uiConfig = {\n    signInSuccessUrl: 'https://yourapp.com/home',  // Adjust URL as needed\n    signInOptions: [\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      firebase.auth.PhoneAuthProvider.PROVIDER_ID,      \n    ],\n    tosUrl: 'https://yourapp.com/home',  // Ensure this is a valid URL\n    privacyPolicyUrl: 'https://yourapp.com/home',  // Ensure this is a valid URL\n    callbacks: {\n      signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n        console.log('signInSuccessWithAuthResult');\n        if (authResult.additionalUserInfo.isNewUser) {\n          console.log('New user detected, signing out.');\n          alert('This email is not registered. Please use a registered email. Singing');\n       //   auth.signOut();  // Sign out if email is not registered\n          return false;  // Prevent redirection for new users\n        }\n        console.log('Returning true for existing user');\n        return true;  // Allow redirection for existing users\n      },\n      uiShown: function() {\n        console.log('uiShown callback triggered');\n        const loader = document.getElementById('loader');\n        if (loader) {\n          console.log('Hide the loader');\n          loader.style.display = 'none';  // Hide loader when UI is shown\n        }\n      }\n    }\n  };\n\n  const ui = new firebaseui.auth.AuthUI(auth);\n  ui.start('#firebaseui-auth-container', uiConfig);  // Start FirebaseUI\n  firebaseUIInitialized = true; // Set flag to prevent re-initialization\n}\n\n// Check if email exists and initialize FirebaseUI accordingly\nfunction checkEmailAndStartUI() {\n  const emailInput = document.querySelector('input[type=\"email\"]');\n  if (emailInput) {\n    const email = emailInput.value;\n    console.log('checkEmailAndStartUI', email);\n    if (email) {\n      fetchSignInMethodsForEmail(auth, email)\n        .then((signInMethods) => {\n          console.log('Sign-in methods:', signInMethods);\n          if (signInMethods.length === 0) {\n            alert('This email is not registered. Please sign up first.');\n            auth.signOut();  // Sign out if email is not registered\n          } else {\n            console.log('initializeFirebaseUI');\n            initializeFirebaseUI();  // Start FirebaseUI if email is registered\n          }\n        })\n        .catch((error) => {\n          console.error('Error checking sign-in methods:', error);\n        });\n    } else {\n      console.log('Email input is empty');\n    }\n  } else {\n    console.error('Email input element not found');\n  }\n}\n\nfunction uploadImageTry() {\n\n  const user = firebase.auth().currentUser; // Check if user is logged in\n\n  if (!user) {\n    alert(\"Please sign in to upload images.\");\n    return;\n  }\n  const fileInput = document.getElementById('imageUpload');\n  const file = fileInput.files[0];\n  const description = document.getElementById('imageText').value;\n\n  if (!file || !description) {\n    alert(\"Please select an image and enter a description.\");\n    return;\n  }\n\n  let uniqueID = uuid.v4();\n  let image = file;\n  let imageUrl = `/images/${uniqueID}/${image.name}`; // image.name = name of image uploaded\n\n  //const imageURL = firebase.storage().ref(`images/${file.name}`);\n\n  const USER = \"User\";\n  const DESCRIPTION = \"description\";\n  const FORMDATA = {\n\n    user: USER,\n\n    description: DESCRIPTION, \n  \n    imageUrl: imageUrl}\n    console.log(\"Data to Firesotre projectpaulstorage: `n\", FORMDATA)\n\n    firebase\n      .firestore() // reference cloud firestore\n      .collection('projectpaulstorage') // reference collection\n      .add({FORMDATA})\n\n    console.log(\"Uplloading Data to Firesotre projectpaulstorage: `n\", FORMDATA)\n\n}\n\n\n\n// Function to upload image and description\nfunction uploadImage() {\n  const user = firebase.auth().currentUser; // Check if user is logged in\n  \n  if (!user) {\n    alert(\"Please sign in to upload images.\");\n    return;\n  }\n\n  const fileInput = document.getElementById('imageUpload');\n  const file = fileInput.files[0];\n  const description = document.getElementById('imageText').value;\n  \n  if (!file || !description) {\n    alert(\"Please select an image and enter a description.\");\n    return;\n  }\n\n  const storageRef = firebase.storage().ref(`images/${file.name}`);\n\n  // Upload the image\n  storageRef.put(file).then(snapshot => {\n    console.log('Image uploaded successfully!');\n\n\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const img = document.createElement('img');\n        img.src = e.target.result;\n        img.alt = file.name;\n        img.style.maxWidth = '200px';\n        document.getElementById('image-list').appendChild(img);\n      };\n      reader.readAsDataURL(file);\n\n      \n      const fbStoreageRef = ref(fbStorage, 'images/' + files.name);\n\n\n\n\n      uploadBytes(fbStorageRef, file)\n        .then(() => getDownloadURL(fbStorageRef))\n        .then((url) => {\n          console.log('File available at', url);\n        })\n        .catch((error) => {\n          console.error('Error uploading file:', error);\n        });\n    } else {\n      console.error('No file selected');\n    }\n\n\n\n\n\n    // Get image download URL\n    snapshot.ref.getDownloadURL().then(url => {\n      console.log('Image available at', url);\n\n      // Store image metadata (description and URL) in Firestore\n      db.collection('projectpaulstorage/').add({\n        url: url,\n        description: description,\n        uploadedAt: firebase.firestore.FieldValue.serverTimestamp(),\n        userId: user.uid\n      }).then(() => {\n        alert('Image and description uploaded successfully!');\n        displayImage(url, description);\n      }).catch(error => {\n        console.error('Error saving image metadata:', error);\n      });\n    });\n  }).catch(error => {\n    console.error('Error uploading image:', error);\n    alert('Image upload failed.');\n  });\n}\n\n// Function to display uploaded image and description in the DOM\nfunction displayImage(url, description) {\n  const img = document.createElement('img');\n  img.src = url;\n  img.alt = description;\n  img.style.maxWidth = '200px';\n\n  const desc = document.createElement('p');\n  desc.textContent = description;\n\n  const container = document.getElementById('image-list');\n  container.appendChild(img);\n  container.appendChild(desc);\n}\n\n// Explicitly attach to the window object\nwindow.uploadImage = uploadImage;\n// window.signIn = signIn;\n// window.signUp = signUp;\n\n\n\n//# sourceURL=webpack:///./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.js"]();
/******/ 	
/******/ })()
;